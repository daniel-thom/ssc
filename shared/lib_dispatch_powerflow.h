#ifndef SYSTEM_ADVISOR_MODEL_LIB_DISPATCH_POWERFLOW_H
#define SYSTEM_ADVISOR_MODEL_LIB_DISPATCH_POWERFLOW_H


#include <memory>

#include "lib_storage_params.h"
#include "lib_dispatch_params.h"
#include "lib_battery_model.h"

struct dispatch_powerflow_state{
    bool canPVCharge;	///< A boolean specifying whether the battery is allowed to charge from PV in the timestep
    bool canClipCharge;	///< A boolean specifying whether the battery is allowed to charge from otherwise clipped PV in the timestep
    bool canGridCharge; ///< A boolean specifying whether the battery is allowed to charge from the Grid in the timestep
    bool canDischarge;  ///< A boolean specifying whether the battery is allowed to discharge in the timestep
    bool canFuelCellCharge; ///< A boolean specifying whether the battery is allowed to charge from the fuel cell

    double powerPV;				   ///< The power production of the PV array (kW)
    double powerPVThroughSharedInverter; ///< The power going through the shared inverter (kW)
    double powerLoad;			   ///< The power required by the electric load (kW)
    double powerBatteryDC; 	       ///< The power flow to and from the battery (> 0, discharging, < 0 charging) (kWdc)
    double powerBatteryAC; 	       ///< The power flow to and from the battery (> 0, discharging, < 0 charging) (kWac)
    double powerBatteryTarget;	   ///< A user specified or alogithm calculated target dispatch power (kW)
    double powerGrid;              ///< The power flow to and from the grid (> 0, to grid, < 0 from grid) (kW)
    double powerGeneratedBySystem; /// The power generated by the combined power generator and battery (kW)
    double powerPVToLoad;          ///< The power from PV to the electric load (kW)
    double powerPVToBattery;       ///< The power from PV to the battery (kW)
    double powerPVToGrid;          ///< The power from PV to the grid (kW)
    double powerPVClipped;		   ///< The power from PV that will be clipped if not used in the battery (kW)
    double powerClippedToBattery;  ///< The power from that would otherwise have been clipped to the battery (kW)
    double powerGridToBattery;     ///< The power from the grid to the battery (kW)
    double powerGridToLoad;        ///< The power from the grid to the electric load (kW)
    double powerBatteryToLoad;     ///< The power from the battery to the electric load (kW)
    double powerBatteryToGrid;     ///< The power from the battery to the grid (kW)
    double powerFuelCell;          ///< The power from the fuelcell (kW)
    double powerFuelCellToGrid;    ///< The power from the fuelcell to the grid (kW)
    double powerFuelCellToLoad;    ///< The power from the fuelcell to the load (kW)
    double powerFuelCellToBattery; ///< The power from the fuelcell to the battery (kW)
    double powerPVInverterDraw;	   ///< The power draw from the PV inverter (kW)
    double powerSystemLoss;        ///< The parasitic power loss in the system (kW)
    double powerConversionLoss;    ///< The power loss due to conversions in the battery power electronics (kW)
    double voltageSystem;		   ///< The system voltage

    double time_at_charging_mode;  ///< For the switch controller

    dispatch_powerflow_state();

    void reset();
};

// Forward declarations
class SharedInverter;

/**
* \class BatteryPowerFlow
*
* \brief
*
*  The BatteryPowerFlow class provides the calculations for which components of the system power flow to/from the battery,
*  which power components go to meet the electric load, and how the utility grid is used.  It is meant to be shared by
*  the lib_power_electronics charge controllers, which require AC power calculations, and the battery dispatch model,
*  which require DC power calculations.  The interaction of this model with other's may seem complex, but the general
*  design of the battery model is:
*
*  1. ChargeController - contains information about conversion efficiencies and configuration, which is passed to BatteryPowerFlow
*  2. Dispatch - contains information about the dispatch strategy desired, and constraints around when the battery can
*				 charge or discharge, and constraints around the state-of-charge, power and current throughput limits
*				 Within the Dispatch, the following steps are taken:
*				 a) Calculate battery power given the dispatch strategy and contraints
*				 b) Dispatch the battery with that power (current)
*				 c) Iterate on the current (due to the nonlinear relationship in P = IV) until the constraints are met
*				 d) Calculate the final power flow for the time step.
*/
class battery_powerflow
{
public:
    /// Create a BatteryPowerFlow object
    battery_powerflow(battery_power_params p, const battery_properties_params &b, SharedInverter* s = nullptr);

    /// Perform a deep copy of a BatteryFlow object
    battery_powerflow(const battery_powerflow& flow);

    /// Initialize the power flow for the battery system.  Only needs to be called for manual dispatch control
    void initialize(double stateOfCharge);

    /// Reset the power flow for a new time step
    void reset();

    /// Calculate the power flow for the battery system
    void calculate_powerflow();

    void apply_dispatch(const storage_state& s, double& target_power);

    void run_switch_controller(double &target_power);

    void run_SOC_controller(double &target_power);

    double get_target_current(const double target_power);

    /// Method to check any operational constraints and modify the battery current if needed
    bool apply_constraints(size_t& count, battery_state& batt_state);

    dispatch_powerflow_state get_state() const {return state;}

private:
    dispatch_powerflow_state state;   /// A structure containing the AC power flow components

    const battery_power_params params;

    std::shared_ptr<battery> battery_model;

    std::shared_ptr<SharedInverter> shared_inverter;	 ///< The shared inverter between the PV and battery for a DC-connected system

    /**
    * \function calculateACConnected
    *
    * Calculate the power flow for an AC connected battery system.  This calculation respects basic constraints about whether
    * a battery is allowed to charge from PV, the Grid, and whether it is allowed to discharge.  The calculation also makes
    * the following assumptions.
    *
    *  0. The BatteryPower contains the powerBattery that the dispatch has determined best fits the constraints
    *  1. Battery is charged from PV before the Grid
    *  2. Battery is charged from the Grid for any remaining power, even if this violates grid charging constraint
    *  3. Battery discharges to the electric load first
    *  4. Any additional battery discharge goes to the Grid.
    *  5. In the event that the battery is allowed to charge and discharge, it will discharge.
    *
    */
    void calculateACConnected();

    /// Calculate the power flow for an DC connected battery system
    void calculateDCConnected();

    bool apply_current_restrictions(double& I);

    bool apply_power_restrictions(double& I, double& V);



};


#endif //SYSTEM_ADVISOR_MODEL_LIB_DISPATCH_POWERFLOW_H
